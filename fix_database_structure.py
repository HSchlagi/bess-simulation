#!/usr/bin/env python3
"""
Repariert die Datenbankstruktur nach der Wiederherstellung
"""

import sqlite3
import os

def fix_database_structure():
    """Repariert die Datenbankstruktur"""
    
    try:
        conn = sqlite3.connect('instance/bess.db')
        cursor = conn.cursor()
        
        print("üîß Repariere Datenbankstruktur...")
        
        # Pr√ºfe und f√ºge fehlende Spalten hinzu
        cursor.execute("PRAGMA table_info(project)")
        columns = [col[1] for col in cursor.fetchall()]
        
        print(f"Bestehende Spalten in project: {columns}")
        
        # F√ºge current_electricity_cost hinzu, falls fehlend
        if 'current_electricity_cost' not in columns:
            print("‚ûï F√ºge current_electricity_cost Spalte hinzu...")
            cursor.execute("""
                ALTER TABLE project 
                ADD COLUMN current_electricity_cost REAL DEFAULT 12.5
            """)
            print("‚úÖ current_electricity_cost Spalte hinzugef√ºgt")
        
        # F√ºge other_power hinzu, falls fehlend
        if 'other_power' not in columns:
            print("‚ûï F√ºge other_power Spalte hinzu...")
            cursor.execute("""
                ALTER TABLE project 
                ADD COLUMN other_power REAL
            """)
            print("‚úÖ other_power Spalte hinzugef√ºgt")
        
        # F√ºge use_case_id hinzu, falls fehlend
        if 'use_case_id' not in columns:
            print("‚ûï F√ºge use_case_id Spalte hinzu...")
            cursor.execute("""
                ALTER TABLE project 
                ADD COLUMN use_case_id INTEGER
            """)
            print("‚úÖ use_case_id Spalte hinzugef√ºgt")
        
        # F√ºge simulation_year hinzu, falls fehlend
        if 'simulation_year' not in columns:
            print("‚ûï F√ºge simulation_year Spalte hinzu...")
            cursor.execute("""
                ALTER TABLE project 
                ADD COLUMN simulation_year INTEGER DEFAULT 2024
            """)
            print("‚úÖ simulation_year Spalte hinzugef√ºgt")
        
        # F√ºge created_at hinzu, falls fehlend
        if 'created_at' not in columns:
            print("‚ûï F√ºge created_at Spalte hinzu...")
            cursor.execute("""
                ALTER TABLE project 
                ADD COLUMN created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            """)
            print("‚úÖ created_at Spalte hinzugef√ºgt")
        
        # Pr√ºfe customer Tabelle
        cursor.execute("PRAGMA table_info(customer)")
        customer_columns = [col[1] for col in cursor.fetchall()]
        print(f"Bestehende Spalten in customer: {customer_columns}")
        
        # F√ºge company Spalte hinzu, falls fehlend
        if 'company' not in customer_columns:
            print("‚ûï F√ºge company Spalte zu customer hinzu...")
            cursor.execute("""
                ALTER TABLE customer 
                ADD COLUMN company TEXT
            """)
            print("‚úÖ company Spalte hinzugef√ºgt")
        
        # Pr√ºfe investment_cost Tabelle
        cursor.execute("PRAGMA table_info(investment_cost)")
        cost_columns = [col[1] for col in cursor.fetchall()]
        print(f"Bestehende Spalten in investment_cost: {cost_columns}")
        
        # F√ºge description Spalte hinzu, falls fehlend
        if 'description' not in cost_columns:
            print("‚ûï F√ºge description Spalte zu investment_cost hinzu...")
            cursor.execute("""
                ALTER TABLE investment_cost 
                ADD COLUMN description TEXT
            """)
            print("‚úÖ description Spalte hinzugef√ºgt")
        
        # F√ºge created_at Spalte hinzu, falls fehlend
        if 'created_at' not in cost_columns:
            print("‚ûï F√ºge created_at Spalte zu investment_cost hinzu...")
            cursor.execute("""
                ALTER TABLE investment_cost 
                ADD COLUMN created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            """)
            print("‚úÖ created_at Spalte hinzugef√ºgt")
        
        conn.commit()
        print("‚úÖ Datenbankstruktur erfolgreich repariert!")
        
        # √úberpr√ºfung
        cursor.execute("SELECT * FROM customer")
        customers = cursor.fetchall()
        print(f"\nüìã Kunden ({len(customers)}):")
        for customer in customers:
            print(f"   - {customer[1]} ({customer[2]})")
        
        cursor.execute("SELECT * FROM project")
        projects = cursor.fetchall()
        print(f"\nüìã Projekte ({len(projects)}):")
        for project in projects:
            print(f"   - {project[1]} (Kunde-ID: {project[12]})")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå Fehler bei der Reparatur: {e}")

if __name__ == "__main__":
    fix_database_structure() 