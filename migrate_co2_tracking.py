#!/usr/bin/env python3
"""
Migration f√ºr CO‚ÇÇ-Tracking System
Erstellt alle notwendigen Tabellen und Daten f√ºr das Nachhaltigkeits-System
"""

import sqlite3
import sys
import os

# CO‚ÇÇ-Tracking System importieren
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
from co2_tracking_system import CO2TrackingSystem

def run_migration():
    """F√ºhrt die CO‚ÇÇ-Tracking Migration durch"""
    
    print("üå± CO‚ÇÇ-Tracking System Migration")
    print("=" * 50)
    
    # Datenbankpfad pr√ºfen
    db_path = 'instance/bess.db'
    if not os.path.exists(db_path):
        print(f"‚ùå Datenbank nicht gefunden: {db_path}")
        return False
    
    try:
        # CO‚ÇÇ-Tracking System initialisieren
        co2_system = CO2TrackingSystem(db_path)
        
        # Tabellen erstellen
        print("üìã Erstelle CO‚ÇÇ-Tracking Tabellen...")
        co2_system.create_co2_tables()
        
        # Test-Daten erstellen (Demo)
        print("üß™ Erstelle Demo-Daten...")
        create_demo_data(co2_system)
        
        print("‚úÖ CO‚ÇÇ-Tracking Migration erfolgreich abgeschlossen!")
        
        # Test der Migration
        print("\nüß™ Teste Migration...")
        test_migration(db_path)
        
        return True
        
    except Exception as e:
        print(f"‚ùå Fehler bei der Migration: {e}")
        return False

def create_demo_data(co2_system):
    """Erstellt Demo-Daten f√ºr das CO‚ÇÇ-Tracking System"""
    
    from datetime import datetime, timedelta
    import random
    
    # Demo-Projekt-ID (falls vorhanden)
    project_id = 1
    
    # Demo-Daten f√ºr die letzten 30 Tage erstellen
    for i in range(30):
        date = (datetime.now() - timedelta(days=i)).strftime('%Y-%m-%d')
        
        # Zuf√§llige Energie-Daten generieren
        energy_data = {
            'energy_stored_kwh': random.uniform(100, 500),
            'energy_discharged_kwh': random.uniform(80, 450),
            'grid_energy_kwh': random.uniform(50, 200),
            'renewable_energy_kwh': random.uniform(200, 400)
        }
        
        # CO‚ÇÇ-Bilanz berechnen
        co2_balance = co2_system.calculate_co2_balance(project_id, date, energy_data)
        
        # CO‚ÇÇ-Bilanz speichern
        co2_system.save_co2_balance(co2_balance)
    
    print(f"‚úÖ Demo-Daten f√ºr {project_id} Tage erstellt")

def test_migration(db_path):
    """Testet die Migration"""
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    # Tabellen pr√ºfen
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name LIKE '%co2%'")
    co2_tables = [row[0] for row in cursor.fetchall()]
    print(f"‚úÖ {len(co2_tables)} CO‚ÇÇ-Tabellen gefunden: {co2_tables}")
    
    # CO‚ÇÇ-Balance-Daten pr√ºfen
    cursor.execute("SELECT COUNT(*) FROM co2_balance")
    co2_count = cursor.fetchone()[0]
    print(f"‚úÖ {co2_count} CO‚ÇÇ-Bilanz-Eintr√§ge vorhanden")
    
    # CO‚ÇÇ-Faktoren pr√ºfen
    cursor.execute("SELECT COUNT(*) FROM co2_factors")
    factors_count = cursor.fetchone()[0]
    print(f"‚úÖ {factors_count} CO‚ÇÇ-Faktoren konfiguriert")
    
    # Nachhaltigkeits-Metriken generieren
    co2_system = CO2TrackingSystem(db_path)
    metrics = co2_system.generate_sustainability_metrics(
        1, '2024-01-01', '2024-12-31', 'yearly'
    )
    print(f"‚úÖ Nachhaltigkeits-Metriken generiert: {metrics['total_energy_kwh']} kWh")
    
    # ESG-Report generieren
    esg_report = co2_system.generate_esg_report(1, 'yearly')
    print(f"‚úÖ ESG-Report generiert: Score {esg_report['overall_esg_score']}")
    
    conn.close()
    
    print("\nüéØ N√§chste Schritte:")
    print("1. CO‚ÇÇ-Dashboard testen: /co2")
    print("2. Demo-Daten √ºberpr√ºfen")
    print("3. ESG-Reports generieren")
    print("4. Benchmark-Daten analysieren")

if __name__ == '__main__':
    success = run_migration()
    sys.exit(0 if success else 1)
